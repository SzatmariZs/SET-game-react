{"version":3,"sources":["components/interfaces.ts","components/shape/subcomponents/Oval.tsx","components/shape/subcomponents/Diamond.tsx","components/shape/subcomponents/Squiggle.tsx","components/shape/Shape.tsx","components/card/Card.tsx","components/board/helpers.ts","components/board/Board.tsx","App.js","reportWebVitals.js","index.js"],"names":["Symbols","Colors","Shadings","GameStates","Oval","color","shading","isStriped","STRIPED","x","y","width","height","rx","ry","fill","OPEN","stroke","strokeWidth","mask","Diamond","points","Squiggle","d","Shape","symbol","id","patternUnits","maskUnits","OVAL","DIAMOND","Card","number","isSelected","clickHandler","shapeArray","Array","className","title","join","onClick","map","shape","index","CARD_ACTIONS","getFreshDeck","freshDeck","forEach","GREEN","PURPLE","RED","SOLID","SQUIGGLE","push","areCardsASet","cards","numbers","Set","symbols","colors","shadings","card","add","filter","set","size","length","init","inDeck","onBoard","selected","sets","gameState","BEFORE_START","countSetsOnBoard","cardsOnBoardLength","i","j","k","trio","putOnBoard","deckIndex","Math","floor","random","newBoard","slice","cardReducer","action","type","START","NEUTRAL","PUT_ON_BOARD","SELECT","payload","newSelected","includes","newOnBoard","cardOnBoard","newState","IS_SET","WON","counter","newGameState","min","NOT_SET","RESET","Board","useReducer","game","dispatch","useState","showHint","setShowHint","startGame","selectCard","setObject","Object","values","Boolean","App","target","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8664546.chunk.js","sourcesContent":["export enum Symbols {\r\n\tDIAMOND = \"diamond\",\r\n\tSQUIGGLE = \"squiggle\",\r\n\tOVAL = \"oval\",\r\n}\r\n\r\nexport enum Colors {\r\n\tGREEN = \"green\",\r\n\tPURPLE = \"purple\",\r\n\tRED = \"red\",\r\n}\r\n\r\nexport enum Shadings {\r\n\tSOLID = \"solid\",\r\n\tSTRIPED = \"striped\",\r\n\tOPEN = \"open\",\r\n}\r\n\r\nexport interface ShapeProps {\r\n\tshading: Shadings;\r\n\tcolor: Colors;\r\n\tsymbol?: Symbols;\r\n}\r\n\r\nexport interface CardProps extends ShapeProps {\r\n\tsymbol?: Symbols;\r\n\tnumber?: number;\r\n\tisSelected?: boolean;\r\n\tclickHandler?: () => void;\r\n}\r\n\r\nexport type CardTrio = [CardProps, CardProps, CardProps];\r\n\r\nexport enum GameStates {\r\n\tBEFORE_START = \"before-start\",\r\n\tNEUTRAL = \"neutral\",\r\n\tIS_SET = \"is-set\",\r\n\tNOT_SET = \"not-set\",\r\n\tWON = \"won\",\r\n}\r\n","import { Shadings, ShapeProps } from \"../../interfaces\";\r\n\r\nexport function Oval({ color, shading }: ShapeProps) {\r\n\tconst isStriped = shading === Shadings.STRIPED;\r\n\r\n\treturn (\r\n\t\t<rect\r\n\t\t\tx='3'\r\n\t\t\ty='3'\r\n\t\t\twidth='80'\r\n\t\t\theight='40'\r\n\t\t\trx='20'\r\n\t\t\try='20'\r\n\t\t\tfill={shading === Shadings.OPEN ? \"transparent\" : color}\r\n\t\t\tstroke={isStriped ? \"\" : color}\r\n\t\t\tstrokeWidth={isStriped ? \"\" : \"3\"}\r\n\t\t\tmask={isStriped ? \"url(#mask-stripe)\" : \"\"}\r\n\t\t/>\r\n\t);\r\n}\r\n","import { Shadings, ShapeProps } from \"../../interfaces\";\r\n\r\nexport function Diamond({ color, shading }: ShapeProps) {\r\n\tconst isStriped = shading === Shadings.STRIPED;\r\n\r\n\treturn (\r\n\t\t<polygon\r\n\t\t\tpoints='3 23,43 43,83 23,43 3'\r\n\t\t\tfill={shading === Shadings.OPEN ? \"transparent\" : color}\r\n\t\t\tstroke={isStriped ? \"\" : color}\r\n\t\t\tstrokeWidth={isStriped ? \"\" : \"3\"}\r\n\t\t\tmask={isStriped ? \"url(#mask-stripe)\" : \"\"}\r\n\t\t/>\r\n\t);\r\n}\r\n","import { Shadings, ShapeProps } from \"../../interfaces\";\r\n\r\nexport function Squiggle({ color, shading }: ShapeProps) {\r\n\tconst isStriped = shading === Shadings.STRIPED;\r\n\r\n\treturn (\r\n\t\t<path\r\n\t\t\td='M 10 18 Q 20 5, 30 12 T 60 12 C 70 12, 83 23, 64 36 Q 55 44, 40 36 T 12 40 C 12 40, 0 40, 10 18'\r\n\t\t\tfill={shading === Shadings.OPEN ? \"transparent\" : color}\r\n\t\t\tstroke={isStriped ? \"\" : color}\r\n\t\t\tstrokeWidth={isStriped ? \"\" : \"3\"}\r\n\t\t\tmask={isStriped ? \"url(#mask-stripe)\" : \"\"}\r\n\t\t/>\r\n\t);\r\n}\r\n","import { Symbols, Shadings, ShapeProps } from \"../interfaces\";\r\nimport { Oval } from \"./subcomponents/Oval\";\r\nimport { Diamond } from \"./subcomponents/Diamond\";\r\nimport { Squiggle } from \"./subcomponents/Squiggle\";\r\n\r\nexport function Shape({ symbol, color, shading }: ShapeProps) {\r\n\treturn (\r\n\t\t<svg width='86' height='46'>\r\n\t\t\t<defs>\r\n\t\t\t\t<pattern\r\n\t\t\t\t\tid='pattern-stripe'\r\n\t\t\t\t\twidth='4'\r\n\t\t\t\t\theight='4'\r\n\t\t\t\t\tpatternUnits='userSpaceOnUse'>\r\n\t\t\t\t\t<rect width='2' height='4' fill='white'></rect>\r\n\t\t\t\t</pattern>\r\n\t\t\t\t<mask id='mask-stripe' maskUnits='userSpaceOnUse'>\r\n\t\t\t\t\t<rect\r\n\t\t\t\t\t\tx='0'\r\n\t\t\t\t\t\ty='0'\r\n\t\t\t\t\t\twidth='100%'\r\n\t\t\t\t\t\theight='100%'\r\n\t\t\t\t\t\tfill='url(#pattern-stripe)'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</mask>\r\n\t\t\t</defs>\r\n\t\t\t{symbol === Symbols.OVAL ? (\r\n\t\t\t\t<g>\r\n\t\t\t\t\t<Oval color={color} shading={shading} />\r\n\t\t\t\t\t{shading === Shadings.STRIPED ? (\r\n\t\t\t\t\t\t<Oval color={color} shading={Shadings.OPEN} />\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</g>\r\n\t\t\t) : symbol === Symbols.DIAMOND ? (\r\n\t\t\t\t<g>\r\n\t\t\t\t\t<Diamond color={color} shading={shading} />\r\n\t\t\t\t\t{shading === Shadings.STRIPED ? (\r\n\t\t\t\t\t\t<Diamond color={color} shading={Shadings.OPEN} />\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</g>\r\n\t\t\t) : (\r\n\t\t\t\t<g>\r\n\t\t\t\t\t<Squiggle color={color} shading={shading} />\r\n\t\t\t\t\t{shading === Shadings.STRIPED ? (\r\n\t\t\t\t\t\t<Squiggle color={color} shading={Shadings.OPEN} />\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</g>\r\n\t\t\t)}\r\n\t\t</svg>\r\n\t);\r\n}\r\n","import { CardProps } from \"../interfaces\";\r\nimport { Shape } from \"../shape/Shape\";\r\nimport \"./Card.css\";\r\n\r\nexport function Card({\r\n\tnumber,\r\n\tsymbol,\r\n\tshading,\r\n\tcolor,\r\n\tisSelected,\r\n\tclickHandler,\r\n}: CardProps) {\r\n\tconst shapeArray: CardProps[] = Array(number).fill({\r\n\t\tcolor,\r\n\t\tsymbol,\r\n\t\tshading,\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`card ${isSelected ? \"selected\" : \"\"}`}\r\n\t\t\ttitle={[number, color, shading, symbol].join(\", \")}\r\n\t\t\tonClick={clickHandler}>\r\n\t\t\t{shapeArray.map((shape, index) => (\r\n\t\t\t\t<Shape\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tsymbol={shape.symbol}\r\n\t\t\t\t\tshading={shape.shading}\r\n\t\t\t\t\tcolor={shape.color}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import {\r\n\tCardProps,\r\n\tCardTrio,\r\n\tColors,\r\n\tGameStates,\r\n\tShadings,\r\n\tSymbols,\r\n} from \"../interfaces\";\r\nimport { GameState } from \"./interfaces\";\r\n\r\nexport const getFreshDeck = (): CardProps[] => {\r\n\tconst freshDeck: CardProps[] = [];\r\n\t[1, 2, 3].forEach((number) =>\r\n\t\t[Colors.GREEN, Colors.PURPLE, Colors.RED].forEach((color) =>\r\n\t\t\t[Shadings.OPEN, Shadings.SOLID, Shadings.STRIPED].forEach(\r\n\t\t\t\t(shading) =>\r\n\t\t\t\t\t[Symbols.DIAMOND, Symbols.OVAL, Symbols.SQUIGGLE].forEach(\r\n\t\t\t\t\t\t(symbol) => {\r\n\t\t\t\t\t\t\tfreshDeck.push({\r\n\t\t\t\t\t\t\t\tnumber,\r\n\t\t\t\t\t\t\t\tcolor,\r\n\t\t\t\t\t\t\t\tshading,\r\n\t\t\t\t\t\t\t\tsymbol,\r\n\t\t\t\t\t\t\t\tisSelected: false,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t)\r\n\t\t)\r\n\t);\r\n\r\n\treturn freshDeck;\r\n};\r\n\r\nexport const areCardsASet = (cards: CardProps[]): boolean => {\r\n\tconst numbers = new Set();\r\n\tconst symbols = new Set();\r\n\tconst colors = new Set();\r\n\tconst shadings = new Set();\r\n\r\n\tcards.forEach((card) => {\r\n\t\tnumbers.add(card.number);\r\n\t\tsymbols.add(card.symbol);\r\n\t\tcolors.add(card.color);\r\n\t\tshadings.add(card.shading);\r\n\t});\r\n\r\n\treturn (\r\n\t\t[numbers, symbols, colors, shadings].filter((set) => set.size === 2)\r\n\t\t\t.length === 0\r\n\t);\r\n};\r\n\r\nexport enum CARD_ACTIONS {\r\n\tPUT_ON_BOARD,\r\n\tSELECT,\r\n\tREMOVE_FROM_BOARD,\r\n\tRESET,\r\n\tSTART,\r\n}\r\n\r\nexport const init = (): GameState => ({\r\n\tinDeck: getFreshDeck(),\r\n\tonBoard: [],\r\n\tselected: [],\r\n\tsets: [],\r\n\tgameState: GameStates.BEFORE_START,\r\n});\r\n\r\nexport const countSetsOnBoard = (onBoard: CardProps[]): CardTrio[] => {\r\n\tconst sets = [];\r\n\tconst cardsOnBoardLength = onBoard.length;\r\n\r\n\tif (cardsOnBoardLength > 3) {\r\n\t\tfor (let i = 0; i < cardsOnBoardLength - 2; i++) {\r\n\t\t\tfor (let j = i + 1; j < cardsOnBoardLength - 1; j++) {\r\n\t\t\t\tfor (let k = j + 1; k < cardsOnBoardLength; k++) {\r\n\t\t\t\t\tconst trio: CardTrio = [onBoard[i], onBoard[j], onBoard[k]];\r\n\r\n\t\t\t\t\tif (areCardsASet(trio)) {\r\n\t\t\t\t\t\tsets.push(trio);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn sets;\r\n};\r\n\r\nexport const putOnBoard = (gameState: GameState): GameState => {\r\n\tconst deckIndex = Math.floor(Math.random() * gameState.inDeck.length);\r\n\tconst card = gameState.inDeck[deckIndex];\r\n\tconst newBoard = [...gameState.onBoard, card];\r\n\r\n\treturn {\r\n\t\t...gameState,\r\n\t\tinDeck: [\r\n\t\t\t...gameState.inDeck.slice(0, deckIndex),\r\n\t\t\t...gameState.inDeck.slice(deckIndex + 1),\r\n\t\t],\r\n\t\tonBoard: newBoard,\r\n\t\tsets: countSetsOnBoard(newBoard),\r\n\t};\r\n};\r\n","import { useState, useReducer } from \"react\";\r\nimport { Card } from \"../card/Card\";\r\nimport { CardProps, GameStates } from \"../interfaces\";\r\nimport {\r\n\tareCardsASet,\r\n\tCARD_ACTIONS,\r\n\tcountSetsOnBoard,\r\n\tinit,\r\n\tputOnBoard,\r\n} from \"./helpers\";\r\nimport \"./Board.css\";\r\nimport { GameState, CardReducerAction } from \"./interfaces\";\r\n\r\nfunction cardReducer(\r\n\tgameState: GameState,\r\n\taction: CardReducerAction\r\n): GameState {\r\n\tswitch (action.type) {\r\n\t\tcase CARD_ACTIONS.START:\r\n\t\t\treturn { ...gameState, gameState: GameStates.NEUTRAL };\r\n\t\tcase CARD_ACTIONS.PUT_ON_BOARD:\r\n\t\t\treturn putOnBoard(gameState);\r\n\t\tcase CARD_ACTIONS.SELECT:\r\n\t\t\tif (!action.payload) {\r\n\t\t\t\treturn gameState;\r\n\t\t\t}\r\n\r\n\t\t\tconst newSelected: CardProps[] = gameState.selected.includes(\r\n\t\t\t\taction.payload\r\n\t\t\t)\r\n\t\t\t\t? gameState.selected.filter(\r\n\t\t\t\t\t\t(selected) => action.payload !== selected\r\n\t\t\t\t  )\r\n\t\t\t\t: [...gameState.selected, action.payload];\r\n\r\n\t\t\tif (newSelected.length === 3 && areCardsASet(newSelected)) {\r\n\t\t\t\tconst newOnBoard = gameState.onBoard.filter(\r\n\t\t\t\t\t(cardOnBoard) => !newSelected.includes(cardOnBoard)\r\n\t\t\t\t);\r\n\t\t\t\tconst sets = countSetsOnBoard(newOnBoard);\r\n\t\t\t\tconst newState =\r\n\t\t\t\t\t!gameState.inDeck.length && !sets.length\r\n\t\t\t\t\t\t? GameStates.WON\r\n\t\t\t\t\t\t: GameStates.IS_SET;\r\n\t\t\t\tlet counter = 0;\r\n\t\t\t\tlet newGameState = {\r\n\t\t\t\t\t...gameState,\r\n\t\t\t\t\tgameState: newState,\r\n\t\t\t\t\tonBoard: newOnBoard,\r\n\t\t\t\t\tsets,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (newState !== GameStates.WON) {\r\n\t\t\t\t\twhile (counter < 3) {\r\n\t\t\t\t\t\tnewGameState = {\r\n\t\t\t\t\t\t\t...newGameState,\r\n\t\t\t\t\t\t\t...putOnBoard(newGameState),\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!newGameState.sets.length) {\r\n\t\t\t\t\t\tcounter = 0;\r\n\r\n\t\t\t\t\t\twhile (\r\n\t\t\t\t\t\t\tcounter < Math.min(3, newGameState.inDeck.length)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tnewGameState = {\r\n\t\t\t\t\t\t\t\t...newGameState,\r\n\t\t\t\t\t\t\t\t...putOnBoard(newGameState),\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn { ...newGameState, selected: [] };\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...gameState,\r\n\t\t\t\tselected: newSelected,\r\n\t\t\t\tgameState:\r\n\t\t\t\t\tnewSelected.length === 3\r\n\t\t\t\t\t\t? GameStates.NOT_SET\r\n\t\t\t\t\t\t: GameStates.NEUTRAL,\r\n\t\t\t};\r\n\t\tcase CARD_ACTIONS.RESET:\r\n\t\t\treturn init();\r\n\t\tdefault:\r\n\t\t\treturn gameState;\r\n\t}\r\n}\r\n\r\nexport function Board() {\r\n\tconst [game, dispatch] = useReducer(cardReducer, init());\r\n\tconst [showHint, setShowHint] = useState<boolean>(false);\r\n\r\n\tconst selectCard = (card: CardProps): void => {\r\n\t\tdispatch({ type: CARD_ACTIONS.SELECT, payload: card });\r\n\t};\r\n\r\n\tconst startGame = (): void => {\r\n\t\tdispatch({ type: CARD_ACTIONS.START });\r\n\t\tfor (let i = 0; i < 12; i++) {\r\n\t\t\tdispatch({ type: CARD_ACTIONS.PUT_ON_BOARD });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='board-container'>\r\n\t\t\t{game.gameState === GameStates.WON && (\r\n\t\t\t\t<div className='winning-message'>\r\n\t\t\t\t\t<p>All possible sets cleared, YOU ARE AMAZING!</p>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => dispatch({ type: CARD_ACTIONS.RESET })}>\r\n\t\t\t\t\t\tPlay again\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{game.gameState === GameStates.BEFORE_START && (\r\n\t\t\t\t<button className='start' onClick={() => startGame()}>\r\n\t\t\t\t\tSTART GAME\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\t\t\t<div className={`board ${game.gameState}`}>\r\n\t\t\t\t{game.onBoard.map((card, index) => (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tnumber={card.number}\r\n\t\t\t\t\t\tsymbol={card.symbol}\r\n\t\t\t\t\t\tshading={card.shading}\r\n\t\t\t\t\t\tcolor={card.color}\r\n\t\t\t\t\t\tisSelected={game.selected.includes(card)}\r\n\t\t\t\t\t\tclickHandler={() => selectCard(card)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<div className='game-info'>\r\n\t\t\t\t<p>Number of SETs on board: {game.sets.length}</p>\r\n\t\t\t\t<p>Cards left in deck: {game.inDeck.length}</p>\r\n\t\t\t\t<button onClick={() => setShowHint(!showHint)}>\r\n\t\t\t\t\t{showHint ? \"Hide hint\" : \"Show hint\"}\r\n\t\t\t\t</button>\r\n\t\t\t\t{showHint &&\r\n\t\t\t\t\tgame.sets.map((set) => (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{set\r\n\t\t\t\t\t\t\t\t.map((setObject) =>\r\n\t\t\t\t\t\t\t\t\tObject.values(setObject)\r\n\t\t\t\t\t\t\t\t\t\t.filter(Boolean)\r\n\t\t\t\t\t\t\t\t\t\t.join(\", \")\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t.join(\"; \")}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import \"./App.css\";\nimport { Board } from \"./components/board/Board\";\nimport { Colors, Shadings, Symbols } from \"./components/interfaces\";\nimport { Shape } from \"./components/shape/Shape\";\n\nfunction App() {\n\treturn (\n\t\t<div className='game-container'>\n\t\t\t<Board />\n\t\t\t<div className='rules'>\n\t\t\t\t<h1>SET</h1>\n\t\t\t\t<p>\n\t\t\t\t\tSet is a real-time card game designed by Marsha Falco in\n\t\t\t\t\t1974 and published by Set Enterprises in 1991.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThe deck consists of <b>81 unique cards</b> that vary in 4\n\t\t\t\t\tfeatures across 3 possibilities for each kind of feature:\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t• number of shapes <b>(1, 2, or 3)</b>,\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t• shape (\n\t\t\t\t\t<Shape\n\t\t\t\t\t\ttitle='Diamond'\n\t\t\t\t\t\tcolor={Colors.GREEN}\n\t\t\t\t\t\tshading={Shadings.SOLID}\n\t\t\t\t\t\tsymbol={Symbols.DIAMOND}\n\t\t\t\t\t/>\n\t\t\t\t\t,{\" \"}\n\t\t\t\t\t<Shape\n\t\t\t\t\t\ttitle='Squiggle'\n\t\t\t\t\t\tcolor={Colors.GREEN}\n\t\t\t\t\t\tshading={Shadings.SOLID}\n\t\t\t\t\t\tsymbol={Symbols.SQUIGGLE}\n\t\t\t\t\t/>\n\t\t\t\t\t, or{\" \"}\n\t\t\t\t\t<Shape\n\t\t\t\t\t\ttitle='Oval'\n\t\t\t\t\t\tcolor={Colors.GREEN}\n\t\t\t\t\t\tshading={Shadings.SOLID}\n\t\t\t\t\t\tsymbol={Symbols.OVAL}\n\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t• shading (\n\t\t\t\t\t<Shape\n\t\t\t\t\t\ttitle='Solid'\n\t\t\t\t\t\tcolor={Colors.RED}\n\t\t\t\t\t\tshading={Shadings.SOLID}\n\t\t\t\t\t\tsymbol={Symbols.OVAL}\n\t\t\t\t\t/>\n\t\t\t\t\t,{\" \"}\n\t\t\t\t\t<Shape\n\t\t\t\t\t\ttitle='Striped'\n\t\t\t\t\t\tcolor={Colors.RED}\n\t\t\t\t\t\tshading={Shadings.STRIPED}\n\t\t\t\t\t\tsymbol={Symbols.OVAL}\n\t\t\t\t\t/>\n\t\t\t\t\t, or{\" \"}\n\t\t\t\t\t<Shape\n\t\t\t\t\t\ttitle='Open'\n\t\t\t\t\t\tcolor={Colors.RED}\n\t\t\t\t\t\tshading={Shadings.OPEN}\n\t\t\t\t\t\tsymbol={Symbols.OVAL}\n\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t• and color (<span className='red'>red</span>,{\" \"}\n\t\t\t\t\t<span className='green'>green</span>, or{\" \"}\n\t\t\t\t\t<span className='purple'>purple</span>).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tEach possible combination of features (e.g. a card with\n\t\t\t\t\t[three] [striped] [green] [diamonds]) appears as a card\n\t\t\t\t\tprecisely once in the deck.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIn the game, certain combinations of three cards are said to\n\t\t\t\t\tmake up a set. For each one of the four categories of\n\t\t\t\t\tfeatures — color, number, shape, and shading — the three\n\t\t\t\t\tcards must display that feature as a) either all the same,\n\t\t\t\t\tor b) all different. Put another way: For each feature the\n\t\t\t\t\tthree cards must avoid having two cards showing one version\n\t\t\t\t\tof the feature and the remaining card showing a different\n\t\t\t\t\tversion.\n\t\t\t\t</p>\n\t\t\t\t<p className='source-info'>\n\t\t\t\t\tSource:{\" \"}\n\t\t\t\t\t<a\n\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\thref='https://en.wikipedia.org/wiki/Set_(card_game)'>\n\t\t\t\t\t\tWikipedia\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\r\n\t\timport(\"web-vitals\").then(\r\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n\t\t\t\tgetCLS(onPerfEntry);\r\n\t\t\t\tgetFID(onPerfEntry);\r\n\t\t\t\tgetFCP(onPerfEntry);\r\n\t\t\t\tgetLCP(onPerfEntry);\r\n\t\t\t\tgetTTFB(onPerfEntry);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}